"""
File Name:      transcriber.py

Author Name:    Jordan Edward Shea <https://github.com/JShea232>

Revised By:     Victoria Kraj

Revision Date:  7/31/18

Description:    This script communicates with IBM Watson's API, which transcribes a WAV file using their Speech-to-Text
                cloud platform. If a user attempts to submit a WAV file that is too large (i.e. over 100 MB), IBM will
                notify the user with an error message.

                Transcriptions will be done in the form of .lab files, and raw data (including time stamps) will be
                stored in a .txt file.

                This is the second-to-last piece of the WAV-to-TextGrid pipeline. This script creates the .lab files
                to be aligned by aligner.py.
"""

import json
import requests
import os

class Transcriber:

    def __init__(self, name):
        self.name = name

    def transcribe_file(self, num_files) -> None:
        """
        This method works by taking in a parameter, num_files, and generating transcriptions for that many WAV files.

        In order to generate transcriptions, a connection is made to IBM Watson, which takes in a username, password,
        url, and the WAV file to be transcribed. If a file is over 100 MB, an error will be generated by IBM.

        For each WAV file, a .lab (label) file will be generated containing the custom-formatted transcription, and a
        raw .txt (text) file will be used to store the raw data (including timestamps).

        :param num_files: Number of files to be transcribed
        :return: None
        """

        # Parameters for making the API call to IBM Watson
        headers = {'Content-Type': 'audio/wav'}
        url = 'https://stream.watsonplatform.net/speech-to-text/api/v1/recognize?timestamps=true'
        username = '4652a052-2d47-4b2d-b705-608484547b2c'
        password = 'Elb2UIQzMbup'

        transcription_path = "~/Desktop/NoSilence/"

        print("Communicating with IBM Watson to transcribe your files...")

        for i in range(9, num_files):

            # current_file corresponds to the path of the WAV file to be transcribed
            # Example: montreal-forced-aligner/JordanSpeakers/SUBJECT_50/SUBJECT_50_1.wav
            if i == 10 or i == 12 or i == 13 or i == 15 or i == 20 or i == 21 or i == 25 or i == 26:
                continue
            else: 
                current_file = os.path.expanduser(transcription_path + self.name + str(i+1) + "NoSilence")
                data = open(current_file + ".wav", 'rb')

                # Saves the response of the POST request to Watson
                try: 
                    response = requests.post(url, headers=headers, data=data, auth=(username, password)).json()
                    results = response['results']
                except:
                    continue 

                # Generates a nicely-formatted transcription within a .lab file, and the raw data within a .txt file
                transcription_file = open(current_file + ".lab", "w")
                raw_data_file = open(current_file + ".txt", "w")

                # Iterates through the results of the API request to create a transcription
                for item in results:
                    transcription_file.write(item['alternatives'][0]['transcript'].upper() + " ")

                # Dumps raw request into the .txt file
                raw_data_file.write(json.dumps(response))

                # Close your files!
                data.close()
                transcription_file.close()

        print("Transcription completed for " + self.name + ".wav")

audio1 = Transcriber("Participant")
audio1.transcribe_file(32) 




